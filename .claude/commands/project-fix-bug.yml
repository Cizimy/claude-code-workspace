name: "project:fix-bug"
description: "バグ修正のテスト駆動ワークフロー - 再現テストから確実な修正まで"
version: "1.0.0"
author: "Claude Code Workspace"
category: "development"

parameters:
  - name: issue_number
    description: "GitHub Issue番号（バグレポート）"
    type: string
    required: true
    example: "456"
  - name: priority
    description: "バグの重要度 (critical/high/medium/low)"
    type: string
    required: false
    default: "medium"
    example: "high"

prompt: |
  あなたは経験豊富なソフトウェア開発者として、GitHub Issue {{issue_number}} で報告されたバグを修正します。
  
  **必須原則**:
  - **再現テストファースト**: バグを確実に再現するテストを最初に作成
  - **根本原因の特定**: 表面的な対処ではなく本質的な解決
  - **最小変更**: バグ修正に必要最小限の変更のみ
  - **回帰防止**: 同様のバグが再発しないためのテスト強化
  - **品質ガード**: Hooksによる自動チェックに従う
  
  **バグ修正 8ステップワークフロー**:
  
  ## Step 1: バグ理解・現状分析 🔍
  1. GitHub Issue {{issue_number}} の内容を詳細に分析
  2. バグの再現手順の理解・確認
  3. 期待される動作と実際の動作の差異特定
  4. 影響範囲の調査（どの機能・ユーザーに影響するか）
  5. バグの重要度評価（{{priority}}に基づく対応方針）
  
  **出力**: バグの要約、再現手順、影響範囲、修正方針
  
  ## Step 2: バグ再現・根本原因調査 🔎
  1. 既存コードでバグの再現を試行
  2. ログ・デバッグ情報の収集と分析
  3. 関連コードの詳細調査（エラーの発生箇所特定）
  4. 類似のバグパターンの確認（コードベース全体）
  5. 根本原因の仮説立案
  
  **調査手法**:
  - スタックトレースの詳細分析
  - 関連する設定・環境の確認
  - データフローの追跡
  - 境界条件・エッジケースの確認
  
  **出力**: 根本原因の特定、バグ発生メカニズムの説明
  
  ## Step 3: テスト作成（再現テスト） 🔴
  1. **RED フェーズ**: バグを確実に再現する失敗するテストを作成
  2. 再現テストが期待通り失敗することを確認
  3. テストコードをコミット: `git commit -m "test: Add failing test reproducing bug #{{issue_number}}"`
  4. エッジケース・境界条件のテストも追加
  
  **再現テストの原則**:
  - バグの症状を正確に捉える
  - 簡単で理解しやすい
  - 他のテストに依存しない
  - 再現性が高い（100%失敗する）
  
  **出力**: 失敗する再現テスト、テスト実行結果の確認
  
  ## Step 4: 最小修正・実装 🟢
  1. **GREEN フェーズ**: バグを修正する最小限のコード変更
  2. 副作用を最小化（既存機能への影響ゼロ）
  3. 修正の範囲を限定（関連のない改善は行わない）
  4. 修正方法の選択基準：
     - 最も安全（リスクが低い）
     - 最もシンプル（理解しやすい）
     - 最も局所的（影響範囲が狭い）
  
  **避けるべき修正**:
  - 大規模リファクタリング
  - 新機能の追加
  - 過度な汎用化
  - 未関連部分の変更
  
  **出力**: 最小限のバグ修正コード
  
  ## Step 5: テスト実行・修正確認 ✅
  1. 再現テストがパスすることを確認
  2. 既存の全テストが通ることを確認（回帰テストなし）
  3. 修正した機能の周辺テストの実行
  4. エッジケース・境界条件での動作確認
  
  **確認項目**:
  - バグが完全に修正されているか
  - 新しい問題が発生していないか
  - パフォーマンスに悪影響がないか
  
  **出力**: 全テスト成功の確認、修正効果の検証
  
  ## Step 6: 回帰防止・テスト強化 🛡️
  1. 同様のバグが発生しうる箇所の特定
  2. 類似パターンに対する予防的テスト追加
  3. エラーハンドリングの強化（必要に応じて）
  4. 入力検証の改善（必要に応じて）
  
  **回帰防止の観点**:
  - バグの根本原因をカバーするテスト
  - 類似の条件・パターンのテスト
  - データ境界・例外条件のテスト
  
  **出力**: 回帰防止テスト、予防策の実装
  
  ## Step 7: 品質チェック・整理 🧹
  1. 修正したコードのリビューと改善
  2. コードスタイル・規約の確認
  3. 未使用コード・デバッグコードの除去
  4. エラーメッセージ・ログの改善
  
  **Hookチェック**: 
  - Unused Code Detector による未使用コード検出
  - Coverage Check による十分なテストカバレッジ確認
  
  **出力**: クリーンアップされたコード
  
  ## Step 8: 最終確認・PR作成 📝
  1. 全テストスイートの最終実行
  2. バグ修正の動作確認（手動テスト）
  3. 修正内容の文書化・コメント追加
  4. コミット・PR作成
  
  **コミットメッセージ例**:
  ```bash
  git commit -m "fix: Resolve {{issue_number}} - [bug summary]
  
  - Add failing test to reproduce the bug
  - Fix [specific problem description]
  - Add regression tests to prevent similar issues
  
  Fixes #{{issue_number}}"
  ```
  
  **PR テンプレート**:
  ```markdown
  ## バグ修正概要
  Issue #{{issue_number}} で報告されたバグの修正
  
  ## 問題の説明
  - **症状**: [バグの具体的な症状]
  - **根本原因**: [特定した原因]
  - **影響範囲**: [影響を受ける機能・ユーザー]
  
  ## 修正内容
  - [具体的な修正内容]
  - [追加した再現テスト]
  - [回帰防止策]
  
  ## テスト
  - [ ] バグ再現テスト追加・成功
  - [ ] 既存テスト全て成功
  - [ ] 回帰防止テスト追加
  - [ ] 手動確認完了
  
  ## 影響評価
  - [ ] 既存機能への影響なし
  - [ ] パフォーマンス影響なし
  - [ ] セキュリティ影響なし
  - [ ] 破壊的変更なし
  
  ## チェックリスト
  - [ ] 最小限の変更で修正
  - [ ] 根本原因を解決
  - [ ] 回帰防止策実装
  - [ ] 文書・コメント更新
  
  Fixes #{{issue_number}}
  ```
  
  **出力**: 最終確認レポート、PR URL
  
  ---
  
  **緊急バグ (priority: critical/high) の場合の特別手順**:
  
  ### 🚨 緊急対応モード
  1. **即座の影響軽減**: 
     - 一時的な回避策の検討・実装
     - ユーザーへの影響を最小化
  
  2. **迅速なホットフィックス**:
     - 最小限のテストで迅速な修正
     - 別途、完全なテスト追加をフォローアップ
  
  3. **緊急リリース対応**:
     - ホットフィックスブランチでの作業
     - 迅速なレビュー・マージ・デプロイ
  
  ---
  
  **重要な注意事項**:
  1. **バグの再現が最優先** - 修正前に必ず再現テストを作成
  2. **最小変更の原則** - 必要以上の変更は新しいリスクを生む
  3. **既存機能の保護** - 修正が他の機能を壊さないことを確認
  4. **回帰防止が重要** - 同じバグが再発しないための仕組み作り
  5. **Hookエラーは必ず解決** - 品質ガードを通過してから進む
  
  それでは、Issue #{{issue_number}} のバグ報告を詳しく分析しましょう。まず、バグの症状と再現手順を教えてください。