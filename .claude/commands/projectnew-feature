You are implementing a new feature as described in GitHub Issue $ARGUMENTS.

Follow these TDD steps strictly:

## 🧪 テスト駆動開発（TDD）- 10ステップワークフロー

### Phase 1: 要件理解・計画 (Requirements & Planning)
1. **要件分析** - Issue内容を読み、不明点があれば質問する。実装はまだ行わない。
2. **設計提案** - KISS・YAGNI原則に従い、必要最小限の設計を提案する。関心の分離（UI vs ロジック vs データ）を確認する。

### Phase 2: テストファースト (Test First)
3. **テスト作成** - 期待する動作とエッジケースをカバーするテストケースを作成する。TDD原則に従い、未実装機能に対してもスタブ実装なしでテストを書く。
4. **テスト実行（失敗確認）** - テストスイートを実行し、新しいテストが正しい理由で失敗することを確認する。テストが通るまで実装には進まない。

### Phase 3: 最小実装 (Minimal Implementation)
5. **最小実装** - 失敗しているテストを通すために必要最小限のコードのみを書く。テストで要求されていない機能や設定は追加しない。
6. **テスト成功まで反復** - テストスイートを再実行する。失敗が残っている場合は、コードを修正してテストを再実行する。このステップではテストのアサーションを変更しない。

### Phase 4: リファクタリング・品質確保 (Refactor & Quality)
7. **必要に応じてリファクタリング** - テストが通っているコードが汚い場合、テストを通したまま改善する。単一責任原則と関心の分離を維持する（例：複数のことを行う巨大な関数の分割）。
8. **未使用コード確認** - 新しい関数やクラスが未使用状態でないかチェックする（見つかった場合は削除するかテストを追加する）。

### Phase 5: 文書化・コミット (Documentation & Commit)
9. **文書更新** - この機能がREADME更新や文書化を必要とする場合、ドラフトを作成する。
10. **コミット・PR作成** - 変更をコミットメッセージにまとめ、Issue番号に言及する。PR説明には何をなぜ行ったかを含める。

## 🎯 成功基準

### 必須要件
- ✅ **全てのテストが通る** - Red → Green サイクルが完了
- ✅ **Issue要件を満たす** - 要求された機能が実装されている
- ✅ **未使用コードなし** - 使用されない関数・変数が残っていない
- ✅ **適切な文書化** - 必要な説明・コメントが追加されている

### 品質要件
- 🎨 **コードがクリーン** - 読みやすく、理解しやすい
- 🔧 **単一責任** - 一つの関数は一つの責任のみ
- 📏 **YAGNI準拠** - 現在必要なもののみ実装
- 🧪 **テストカバレッジ** - 新しいコードは100%カバー

## ⚠️ 注意事項

### 絶対に避けること
- ❌ テストを書く前に実装コードを書く
- ❌ 要求にない「便利な」機能を追加する
- ❌ テストを通すためにテストを変更する
- ❌ 複雑で汎用的な解決策を選ぶ

### 判断に迷った時
- 🤔 **不明点があれば質問** - 推測で実装しない
- 📝 **シンプルさを優先** - 複雑 vs シンプルで迷ったらシンプル
- 🔍 **既存パターンを参照** - 同様の機能がある場合は一貫性を保つ

## 🔄 反復プロセス

各ステップで以下を確認：
1. 現在のステップの目的は明確か？
2. 次のステップに進む条件を満たしているか？
3. YAGNI・KISS原則に反していないか？
4. テストが適切にカバーしているか？

**プロセスを急がず、一歩ずつ確実に進めてください。品質は速度よりも優先されます。**