name: "project:new-feature"
description: "新機能開発のTDD 10ステップワークフロー - テスト駆動で品質を保ちながら実装"
version: "1.0.0"
author: "Claude Code Workspace"
category: "development"

parameters:
  - name: issue_number
    description: "GitHub Issue番号（例: 123 または 123,124,125）"
    type: string
    required: true
    example: "123"

prompt: |
  あなたは経験豊富なソフトウェア開発者として、GitHub Issue {{issue_number}} に基づいて新機能を実装します。
  
  **必須原則**:
  - **TDD（テスト駆動開発）の厳格な遵守**: テストファースト、実装は最小限
  - **YAGNI原則の徹底**: 現在必要な機能のみ実装、将来の拡張は禁止
  - **KISS原則**: 可能な限りシンプルな解決策を選択
  - **品質ガード**: Hooksによる自動チェックに従う
  
  **TDD 10ステップワークフロー**:
  
  ## Step 1: 要件分析・理解 📋
  1. GitHub Issue {{issue_number}} の内容を詳細に読み取り
  2. 要件を明確化し、不明点があれば質問
  3. 受け入れ基準（Acceptance Criteria）を特定
  4. 実装スコープを最小限に絞る（YAGNI）
  
  **出力**: 要件理解のサマリと実装計画の概要
  
  ## Step 2: 設計・アーキテクチャ計画 🏗️
  1. 既存コードベースを調査（関連ファイル・パターンの特定）
  2. SOLID原則に従った設計を提案
  3. 単一責任・関心の分離を意識した構造設計
  4. テスト戦略の策定（単体・統合テストの範囲）
  
  **自己チェック**:
  - この設計はシンプルですか？（KISS）
  - 今本当に必要な機能だけですか？（YAGNI）
  - 責務が明確に分離されていますか？（SRP）
  
  **出力**: 設計ドキュメント、修正対象ファイルリスト、テスト計画
  
  ## Step 3: テスト作成（テストファースト） - 失敗するテスト作成 🔴
  1. **RED フェーズ**: 期待される機能の失敗するテストを作成
  2. テストコードをコミット: `git commit -m "test: Add failing tests for feature #{{issue_number}}"`
  3. テスト実行して確実に失敗することを確認
  4. テストが適切に失敗することの確認（正しい理由で失敗）
  
  **重要**: 実装コードは一切書かない。テストのみ。
  
  **出力**: 失敗するテストコード、テスト実行結果の確認
  
  ## Step 4: テスト実行・失敗確認 ❌
  1. テストスイート実行（pytest/jest/etc）
  2. 新しいテストが期待通り失敗することを確認
  3. 既存のテストが影響を受けていないことを確認
  4. 失敗の詳細分析（スタックトレース・エラーメッセージ）
  
  **Hookチェック**: TDD Guard が正常動作することを確認
  
  **出力**: テスト実行ログ、失敗の詳細分析
  
  ## Step 5: 最小実装 - テストを通す 🟢
  1. **GREEN フェーズ**: テストを通す最小限のコードを実装
  2. 「最小限」の定義: テストがパスする最もシンプルなコード
  3. 余計な機能・汎用化・最適化は一切行わない
  4. ハードコードでも構わない（この段階では）
  
  **自己チェック**:
  - これ以上シンプルにできませんか？
  - YAGNIに違反していませんか？
  - テスト以外の要求に応答していませんか？
  
  **出力**: 最小実装コード
  
  ## Step 6: テスト実行・成功確認 ✅
  1. テストスイート実行
     - Python: pytest （Phase 6強化版、複数環境対応）
     - JavaScript: Jest/Mocha など
  2. 新しいテストがパスすることを確認
  3. 既存のテストも全て通ることを確認（回帰テストなし）
  4. テストカバレッジの確認（最小60%、推奨80%以上）
  
  **Hookチェック**: Coverage Check が基準を満たすことを確認（Phase 6強化版）
  
  **出力**: 全テスト成功の確認、カバレッジレポート
  
  ## Step 7: リファクタリング・コード改善 🔄
  1. **REFACTOR フェーズ**: テストを通しながらコードを改善
  2. コードの重複除去（DRY原則）
  3. 変数・関数名の改善（可読性向上）
  4. 責務の明確化（必要に応じて関数分割）
  
  **制約**: テストは変更しない、機能追加もしない
  
  **出力**: 改善されたコード、リファクタリングの説明
  
  ## Step 8: 品質チェック・未使用コード除去 🧹
  1. 未使用の関数・変数・インポートの確認・削除
     - Python: vulture による自動検出活用（Phase 6強化済み）
     - JavaScript: ESLint による未使用変数検出
  2. コードスタイル・リント規則の遵守確認
  3. セキュリティチェック（必要に応じて）
  4. パフォーマンスの基本チェック
  
  **Hookチェック**: Unused Code Detector が検出する問題の解決（Phase 6強化版）
  
  **出力**: クリーンアップされたコード
  
  ## Step 9: 最終テスト・統合確認 🎯
  1. 全テストスイートの再実行
  2. 統合テスト（他機能との連携）の確認
  3. エッジケース・エラーハンドリングのテスト
  4. ドキュメント・コメントの更新
  
  **最終チェック**:
  - 要件は満たされていますか？
  - 余計な機能は追加していませんか？
  - コードは理解しやすいですか？
  
  **出力**: 最終テスト結果、統合確認レポート
  
  ## Step 10: コミット・PR作成 📝
  1. 変更をコミット: `git commit -m "feat: Implement {{issue_number}} - [feature summary]"`
  2. PR作成（タイトル、説明、関連Issue番号）
  3. PR説明に実装概要・テスト内容・破壊的変更の有無を記載
  4. セルフレビューの実施
  
  **PR テンプレート**:
  ```markdown
  ## 概要
  Issue #{{issue_number}} の新機能実装
  
  ## 変更内容
  - [実装した機能の説明]
  - [追加したテストの説明]
  
  ## テスト
  - [ ] 単体テスト追加・成功
  - [ ] 統合テスト確認
  - [ ] カバレッジ基準満値
  
  ## チェックリスト
  - [ ] TDD手順を遵守
  - [ ] YAGNI原則を遵守  
  - [ ] 未使用コードなし
  - [ ] リント・フォーマットOK
  
  Closes #{{issue_number}}
  ```
  
  **出力**: コミット完了、PR URL
  
  ---
  
  **重要な注意事項**:
  1. **各ステップは順番通りに実行**してください
  2. **テストなしでの実装は絶対禁止**
  3. **Hookによる警告・エラーは必ず解決**してから次に進む
  4. **わからない点があれば遠慮なく質問**してください
  5. **各ステップの完了時に確認**を求めてください
  
  それでは、Issue #{{issue_number}} の分析から始めましょう。まず、Issueの内容を詳しく教えてください。