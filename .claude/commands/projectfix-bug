You are fixing a bug described in Issue $ARGUMENTS.

Follow these bug-fix TDD steps:

## 🐛 バグ修正TDDワークフロー

### Phase 1: バグ理解・再現 (Bug Understanding & Reproduction)
1. **バグ分析** - Issue の内容を詳しく読み、以下を特定する：
   - 期待される動作
   - 実際の動作
   - 再現手順
   - 影響範囲

2. **再現テスト作成** - バグが発生することを証明するテストを書く：
   - 現在の実装では失敗するテスト
   - バグが修正されれば成功するべきテスト
   - エッジケースも含める

### Phase 2: バグ検証 (Bug Verification)
3. **再現テスト実行** - 新しいテストを実行し、期待通りに失敗することを確認する：
   - テストが正しい理由で失敗している
   - スタックトレースや失敗メッセージが有用
   - 他のテストは影響を受けていない

4. **根本原因特定** - 失敗したテストのスタックトレースを使用するか、コードベースを検索してバグの原因を特定する：
   - どこでバグが発生しているか
   - なぜそのバグが起きているか
   - 影響する可能性のある他の箇所

### Phase 3: 最小修正 (Minimal Fix)
5. **バグ修正** - 副作用を引き起こさずに問題を解決するコードを修正する：
   - 可能な限り最小限の変更
   - 根本原因に対する修正
   - 一時的な回避策ではなく根本的解決

6. **全テスト実行** - 以前に失敗していたテストが通り、他のテストが壊れていないことを確認する：
   - 修正によって新しい問題が発生していない
   - 関連機能が正常に動作している
   - 既存のテストカバレッジが維持されている

### Phase 4: 品質保証 (Quality Assurance)
7. **必要に応じてリファクタリング** - 修正によって導入されたコードの問題を清掃する：
   - コーディング標準の遵守
   - 重複コードの除去
   - 可読性の向上

8. **回帰テスト追加** - 同じバグが将来発生しないよう予防テストを追加：
   - 類似のエッジケースをカバー
   - 関連する機能の境界値テスト
   - バグの根本原因に関連するシナリオ

### Phase 5: 検証・文書化 (Verification & Documentation)
9. **影響範囲確認** - 修正が意図した通りに動作し、予期しない副作用がないことを確認：
   - 手動テスト（可能な場合）
   - 統合テストの実行
   - パフォーマンス影響のチェック

10. **コミット・PR作成** - 修正を適切に文書化してコミット：
    - コミットメッセージ例：「Fix #123: <バグの概要>」
    - PR説明に根本原因と修正方法を記載
    - 将来の参考のためのテストケース説明

## 🎯 バグ修正成功基準

### 必須要件
- ✅ **バグが再現できる** - 修正前にテストでバグを証明
- ✅ **バグが解決された** - 再現テストが通る
- ✅ **回帰なし** - 既存機能が破損していない
- ✅ **根本原因に対処** - 症状ではなく原因を修正

### 品質要件
- 🔍 **最小変更** - 必要最小限の修正のみ
- 🛡️ **予防策追加** - 同じバグの再発防止
- 📝 **適切な文書化** - 修正理由と方法の記録
- 🧪 **テスト強化** - 関連テストカバレッジの向上

## ⚠️ バグ修正での注意事項

### 避けるべきこと
- ❌ バグを再現せずに修正を始める
- ❌ 症状だけを抑える応急処置
- ❌ 大規模な書き換えを行う
- ❌ 関連のない「改善」を同時に行う

### バグ修正のベストプラクティス
- 🎯 **一つずつ修正** - 複数のバグを同時に修正しない
- 🔬 **証拠に基づく修正** - 推測ではなく事実に基づく
- 🧪 **テストで保証** - 修正が正しいことをテストで証明
- 📊 **影響範囲を意識** - 変更が他に与える影響を考慮

## 🔄 修正プロセス

各段階で確認すること：
1. **バグを正しく理解したか？**
2. **再現テストは適切か？**
3. **修正は最小限か？**
4. **既存機能は保護されているか？**
5. **将来の予防策は十分か？**

## 🚨 緊急時の対応

### 本番環境の重大バグの場合
1. **Hotfix ブランチ** - main から直接分岐
2. **最小限の修正** - リスクを最小化
3. **即座のテスト** - 修正の検証
4. **迅速なデプロイ** - 本番への適用
5. **事後検証** - 完全なテストとドキュメント化

**バグ修正は慎重かつ系統的に行い、新しい問題を生まないよう注意してください。**