name: Governance CI

on:
  push:
    paths:
      - 'governance/**'
  pull_request:
    paths:
      - 'governance/**'

jobs:
  adr-validation:
    runs-on: ubuntu-latest
    name: ADR Format Validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js for markdown tools
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install markdown validation tools
        run: |
          npm install -g markdown-link-check
          sudo apt-get update
          sudo apt-get install -y grep coreutils
      
      - name: Validate ADR format and metadata
        run: |
          cd governance
          
          # ADR 番号の重複チェック
          echo "🔍 Checking for duplicate ADR numbers..."
          adr_numbers=$(ls adr/*.md 2>/dev/null | sed 's/.*\/\([0-9]*\)-.*/\1/' | sort)
          duplicate_numbers=$(echo "$adr_numbers" | uniq -d)
          
          if [ -n "$duplicate_numbers" ]; then
            echo "❌ ERROR: Duplicate ADR numbers found: $duplicate_numbers"
            exit 1
          else
            echo "✅ No duplicate ADR numbers found"
          fi
          
          # ADR メタデータ必須フィールドチェック
          echo "🔍 Validating ADR required sections..."
          exit_code=0
          
          for file in adr/*.md; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              
              # 必須セクションの存在確認
              if ! grep -q "^## Status" "$file"; then
                echo "❌ ERROR: Missing '## Status' section in $file"
                exit_code=1
              fi
              
              if ! grep -q "^## Context" "$file"; then
                echo "❌ ERROR: Missing '## Context' section in $file"
                exit_code=1
              fi
              
              if ! grep -q "^## Decision" "$file"; then
                echo "❌ ERROR: Missing '## Decision' section in $file"
                exit_code=1
              fi
              
              # Statusの値チェック
              status_line=$(grep "^## Status" -A 1 "$file" | tail -1)
              if ! echo "$status_line" | grep -E "(Proposed|Accepted|Rejected|Superseded)"; then
                echo "⚠️  WARNING: Invalid or missing Status value in $file. Expected: Proposed|Accepted|Rejected|Superseded"
              fi
              
              echo "✅ $file format validation completed"
            fi
          done
          
          if [ $exit_code -ne 0 ]; then
            echo "❌ ADR validation failed"
            exit $exit_code
          else
            echo "✅ All ADR files passed validation"
          fi

  file-naming-lint:
    runs-on: ubuntu-latest
    name: File Naming Convention Check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check ADR naming convention
        run: |
          echo "🔍 Checking ADR file naming conventions..."
          exit_code=0
          
          # ADR ファイル名: NNN-kebab-case.md
          find governance/adr -name "*.md" | while read file; do
            basename_file="$(basename "$file")"
            
            # TEMPLATE.md や README.md は除外
            if [[ "$basename_file" == "TEMPLATE.md" || "$basename_file" == "README.md" ]]; then
              echo "ℹ️  Skipping template/readme file: $basename_file"
              continue
            fi
            
            if ! echo "$basename_file" | grep -E '^[0-9]{3}-[a-z0-9-]+\.md$'; then
              echo "❌ ERROR: ADR naming violation: $basename_file"
              echo "   Expected format: NNN-kebab-case.md (e.g., 001-my-decision.md)"
              exit 1
            else
              echo "✅ $basename_file follows naming convention"
            fi
          done
          
      - name: Check Meeting Minutes naming convention
        run: |
          echo "🔍 Checking Meeting Minutes file naming conventions..."
          
          # Meeting Minutes ファイル名: YYYY-MM-DD-topic.md
          find governance/mtg_minutes -name "*.md" | while read file; do
            basename_file="$(basename "$file")"
            
            # TEMPLATE.md は除外
            if [[ "$basename_file" == "TEMPLATE.md" ]]; then
              echo "ℹ️  Skipping template file: $basename_file"
              continue
            fi
            
            if ! echo "$basename_file" | grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}-[a-z0-9-]+\.md$'; then
              echo "⚠️  WARNING: Meeting Minutes naming suggestion: $basename_file"
              echo "   Recommended format: YYYY-MM-DD-topic.md (e.g., 2025-07-13-governance-setup.md)"
            else
              echo "✅ $basename_file follows naming convention"
            fi
          done
          
      - name: Check decision log format
        run: |
          echo "🔍 Checking decision_log.md format..."
          
          if [ -f governance/decision_log.md ]; then
            # テーブル形式の確認
            if grep -q "| 日付 | ADR" governance/decision_log.md; then
              echo "✅ decision_log.md table format is correct"
            else
              echo "❌ ERROR: decision_log.md table format is incorrect"
              echo "   Expected table header: | 日付 | ADR | 決定事項 |"
              exit 1
            fi
          else
            echo "⚠️  WARNING: decision_log.md not found"
          fi

  governance-links:
    runs-on: ubuntu-latest
    name: Governance Links Validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js for link checking
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install link checking tools
        run: |
          npm install -g markdown-link-check
          
      - name: Validate internal ADR links
        run: |
          echo "🔍 Checking ADR internal references..."
          exit_code=0
          
          # ADR 間の相互参照リンクチェック
          find governance -name "*.md" -type f | while read file; do
            echo "Checking links in $file..."
            
            # ADR-XXX 形式の参照を抽出
            adr_refs=$(grep -o "ADR-[0-9][0-9][0-9]" "$file" 2>/dev/null || true)
            
            if [ -n "$adr_refs" ]; then
              for adr_ref in $adr_refs; do
                adr_num=$(echo "$adr_ref" | sed 's/ADR-//')
                
                # 対応するADRファイルが存在するかチェック
                if ! ls governance/adr/${adr_num}-*.md >/dev/null 2>&1; then
                  echo "❌ ERROR: Broken ADR reference $adr_ref in $file"
                  echo "   Expected file: governance/adr/${adr_num}-*.md"
                  exit 1
                else
                  echo "✅ Valid ADR reference: $adr_ref"
                fi
              done
            fi
          done
          
      - name: Check markdown link validity
        run: |
          echo "🔍 Checking markdown links..."
          
          # governance ディレクトリ内の全 markdown ファイルでリンクチェック
          find governance -name "*.md" -type f | while read file; do
            echo "Running link check on $file..."
            
            # 設定ファイルを作成（外部リンクタイムアウト調整）
            cat > .markdown-link-check.json << 'EOF'
          {
            "timeout": "10s",
            "retryOn429": true,
            "retryCount": 2,
            "ignorePatterns": [
              {
                "pattern": "^http://localhost"
              },
              {
                "pattern": "^https://localhost"
              }
            ]
          }
          EOF
            
            # リンクチェック実行（外部リンクエラーは警告のみ）
            if ! markdown-link-check "$file" --config .markdown-link-check.json; then
              echo "⚠️  WARNING: Some links in $file may be invalid"
              echo "   This will not fail the CI, but please review the links"
            else
              echo "✅ All links in $file are valid"
            fi
          done

  governance-summary:
    runs-on: ubuntu-latest
    name: Governance Health Check
    needs: [adr-validation, file-naming-lint, governance-links]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate governance summary
        run: |
          echo "📊 Governance Health Summary"
          echo "================================"
          
          # ADR ファイル数
          adr_count=$(find governance/adr -name "*.md" -not -name "TEMPLATE.md" | wc -l)
          echo "📁 ADR files: $adr_count"
          
          # Meeting Minutes ファイル数
          mtg_count=$(find governance/mtg_minutes -name "*.md" -not -name "TEMPLATE.md" | wc -l)
          echo "📝 Meeting Minutes: $mtg_count"
          
          # Decision Log の最終更新
          if [ -f governance/decision_log.md ]; then
            last_updated=$(grep "最終更新:" governance/decision_log.md | tail -1 || echo "更新日不明")
            echo "📅 Decision Log: $last_updated"
          fi
          
          # CI ジョブ結果表示
          echo ""
          echo "🔍 CI Job Results:"
          echo "- ADR Validation: ${{ needs.adr-validation.result }}"
          echo "- File Naming: ${{ needs.file-naming-lint.result }}"
          echo "- Link Validation: ${{ needs.governance-links.result }}"
          
          echo ""
          echo "✅ Governance CI completed"